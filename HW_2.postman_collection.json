{
	"info": {
		"_postman_id": "196fb136-c5e3-491e-8084-794e7571c817",
		"name": "HW_2.postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HW-01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"//1. Отправить запрос. ",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//2. Статус код 200 3. Проверить, что в body приходит правильный string. ",
							"pm.test(\"This is the first responce from server!\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW-02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.",
							"//2. Статус код 200",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"var resp_data = pm.response.json();",
							"",
							"/*",
							"4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"*/",
							"",
							"",
							"pm.test(\"name-rest\", function () {",
							"    pm.expect(resp_data.name).to.eql(\"Jane\");",
							"});",
							"",
							"pm.test(\"age-rest\", function () {",
							"    pm.expect(resp_data.age).to.eql(\"35\");",
							"});",
							"",
							"pm.test(\"salary-rest\", function () {",
							"    pm.expect(resp_data.salary).to.eql(1000);",
							"});",
							"",
							"/*",
							"7. Спарсить request.",
							"8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"*/",
							"",
							"var req_data = request.data",
							"",
							"pm.test(\"name-req\", function () {",
							"    pm.expect(resp_data.name).to.eql(req_data.name);",
							"});",
							"",
							"pm.test(\"age-req\", function () {",
							"    pm.expect(resp_data.age).to.eql(req_data.age);",
							"});",
							"",
							"pm.test(\"salary1000-req\", function () {",
							"    pm.expect(resp_data.salary).to.eql(+req_data.salary);",
							"});",
							"",
							"//11. Вывести в консоль параметр family из response.",
							"console.log(resp_data.family);",
							"",
							"",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Check_u_salary*4\", function () {",
							"    pm.expect(Number(resp_data.family.u_salary_1_5_year)).to.eql(+req_data.salary*4);",
							"});",
							"    ",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Jane",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW-03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос. ",
							"//2. Статус код 200 ",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json. ",
							"//4. Спарсить request. ",
							"var resp_data = pm.response.json();",
							"var req_data = pm.request.url.query.toObject();",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"name-req\", function () {",
							"    pm.expect(resp_data.name).to.eql(pm.request.url.query.get(\"name\"))",
							"});",
							"",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.) ",
							"pm.test(\"age-req\", function () {",
							"    pm.expect(resp_data.age).to.eql(pm.request.url.query.get(\"age\"))",
							"});",
							"",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.) ",
							"pm.test(\"salary1000-req\", function () {",
							"    pm.expect(resp_data.salary).to.eql(+pm.request.url.query.get(\"salary\"))",
							"});",
							"",
							"//8. Вывести в консоль параметр family из response. ",
							"console.log(resp_data.family);",
							"",
							"//9. Проверить, что у параметра dog есть параметры age. ",
							"pm.test(\"dog-age\", function () {",
							"    pm.expect(resp_data.family.pets.dog).to.have.property(\"age\")",
							"});",
							"",
							"//10. Проверить, что у параметра dog есть параметры name. ",
							"pm.test(\"dog-name\", function () {",
							"    pm.expect(resp_data.family.pets.dog).to.have.property(\"name\")",
							"});",
							"",
							"//11. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"dog_age4\", function () {",
							" pm.expect(resp_data.family.pets.dog.age).to.eql+(4);   ",
							"});",
							"",
							"//12. Проверить, что параметр name имеет значение ",
							"pm.test(\"dog_Luky\", function () {",
							" pm.expect(resp_data.family.pets.dog.name).to.eql(\"Luky\");   ",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Jane&age=35&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Jane"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW-04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос. ",
							"//2. Статус код 200 ",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json. ",
							"//4. Спарсить request. ",
							"var resp_data = pm.response.json();",
							"var req_data = pm.request.url.query.toObject();",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.) ",
							"pm.test(\"name-req\", function () {",
							"    pm.expect(resp_data.name).to.eql(resp_data.name)",
							"});",
							"",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.) ",
							"pm.test(\"age-req\", function () {",
							"    pm.expect(resp_data.age).to.eql(resp_data.age)",
							"});",
							"",
							"//7. Вывести в консоль параметр salary из request. ",
							"//8. Вывести в консоль параметр salary из response. ",
							"console.log(req_data.salary);",
							"console.log(resp_data.salary);",
							"",
							"//9. Вывести в консоль 0-й элемент параметра salary из response. ",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response. ",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response. ",
							"console.log(resp_data.salary[0]);",
							"console.log(resp_data.salary[1]);",
							"console.log(resp_data.salary[2]);",
							"",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.) ",
							"pm.test(\"Salary_1000\", function () {",
							"   pm.expect(resp_data.salary[0]).to.eql(+req_data.salary);",
							"});",
							"",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.) ",
							"pm.test(\"Salary_2000\", function () {",
							"   pm.expect(resp_data.salary[1]).to.eql+(req_data.salary*2);",
							"});",
							"",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.) ",
							"pm.test(\"Salary_3000\", function () {",
							"   pm.expect(resp_data.salary[2]).to.eql+(req_data.salary*3);",
							"});",
							"",
							"//15. Создать в окружении переменную name ",
							"//16. Создать в окружении переменную age ",
							"//17. Создать в окружении переменную salary ",
							"//18. Передать в окружение переменную name ",
							"//19. Передать в окружение переменную age ",
							"//20. Передать в окружение переменную salary ",
							"",
							"pm.environment.set(\"name\", \"Jane\");",
							"pm.environment.set(\"age\", \"35\");",
							"pm.environment.set(\"salary\", 1000);",
							"",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for (var key in resp_data.salary) {",
							"    console.log(key+\": \"+ resp_data.salary[key]);",
							"};",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Jane&age=35&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Jane"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW-05",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"//1.Спарсить response body в json. ",
							"//2.Спарсить request. ",
							"var resp_data = pm.response.json();",
							"var req_data = request.data;",
							"",
							"//3.Вставить параметр salary из окружения в request ",
							"//4.Вставить параметр age из окружения в age ",
							"//5.Вставить параметр name из окружения в name ",
							"pm.environment.get(\"salary\")",
							"pm.environment.get(\"age\")",
							"pm.environment.get(\"name\")",
							"",
							"//6. Отправить запрос. ",
							"//7. Статус код 200 ",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//8. Проверить, что json response имеет параметр start_qa_salary ",
							"pm.test(\"Json response have start_qa_salary\", function () {",
							"   pm.expect(resp_data).to.have.property ('start_qa_salary');",
							"});",
							"",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months ",
							"pm.test(\"Json response have qa_salary_after_6_months \", function () {",
							"   pm.expect(resp_data).to.have.property ('qa_salary_after_6_months');",
							"});",
							"",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months ",
							"pm.test(\"Json response have qa_salary_after_12_months\", function () {",
							"   pm.expect(resp_data).to.have.property ('qa_salary_after_12_months');",
							"});",
							"",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year ",
							"pm.test(\"Json response have qa_salary_after_1.5_year\", function () {",
							"   pm.expect(resp_data).to.have.property ('qa_salary_after_1.5_year');",
							"});",
							"",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years ",
							"pm.test(\"Json response have qa_salary_after_3.5_years\", function () {",
							"   pm.expect(resp_data).to.have.property ('qa_salary_after_3.5_years');",
							"});",
							"",
							"//13. Проверить, что json response имеет параметр person ",
							"pm.test(\"Json response have person\", function () {",
							"   pm.expect(resp_data).to.have.property ('person');",
							"});",
							"",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.) ",
							"pm.test(\"start_qa_salary=salary\", function () {",
							"   pm.expect(resp_data.start_qa_salary).to.eql(+req_data.salary);",
							"});",
							"",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.) ",
							"pm.test(\"qa_salary_after_6_months=salary*2\", function () {",
							"   pm.expect(resp_data.qa_salary_after_6_months).to.eql(+req_data.salary*2);",
							"});",
							"",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.) ",
							"pm.test(\"qa_salary_after_12_months=salary*2.7\", function () {",
							"   pm.expect(resp_data.qa_salary_after_12_months).to.eql(+req_data.salary*2.7);",
							"});",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.) ",
							"pm.test(\"qa_salary_after_1.5_year=salary*3.3\", function () {",
							"   pm.expect(resp_data[\"qa_salary_after_1.5_year\"]).to.eql(+req_data.salary*3.3);",
							"});",
							"",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.) ",
							"",
							"pm.test(\"qa_salary_after_3.5_year=salary*3.8\",function () {",
							"   pm.expect(resp_data[\"qa_salary_after_3.5_years\"]).to.eql(+req_data.salary*3.8);",
							"});",
							"",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.) ",
							"pm.test(\"u_name=salary \", function () {",
							"   pm.expect(resp_data.person.u_name[1]).to.eql(+req_data.salary);",
							"});",
							"",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.) ",
							"pm.test(\"u_age=age \", function () {",
							"   pm.expect(resp_data.person.u_age).to.eql(+req_data.age);",
							"});",
							"",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.) ",
							"pm.test(\"u_salary_5_years=salary*4.2\", function () {",
							"   pm.expect(resp_data.person.u_salary_5_years).to.eql(+req_data.salary*4.2);",
							"});",
							"",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for (var key in resp_data.person) {",
							"    console.log(key+\": \"+ resp_data.person[key]);",
							"};",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name ",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}